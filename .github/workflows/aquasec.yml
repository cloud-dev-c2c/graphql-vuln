name: build
on:
  push:
    branches:
      - deploy-cloudhub-dev
jobs:
  all-in-one:
    name: Aqua scanner
    runs-on: ubuntu-latest
    environment: cloudhub-dev
    env:
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ github.sha }}
      AQUA_KEY: ${{ secrets.AQUA_KEY }}
      AQUA_SECRET: ${{ secrets.AQUA_SECRET }}
      TRIVY_RUN_AS_PLUGIN: 'aqua'
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AQUA_URL: ${{secrets.AQUA_URL}}
      CSPM_URL: ${{secrets.CSPM_URL}}
      BILLY_SERVER: ${{secrets.BILLY_DEV}}
      AQUA_USER: ${{secrets.AQUA_USER}}
      AQUA_PASSWORD: ${{secrets.AQUA_PASSWORD}}
      AQUA_HOST: ${{secrets.AQUA_HOST}}
      AQUA_TOKEN: ${{secrets.AQUA_TOKEN}}
      
    permissions:
        id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run Aqua scanner
        uses: docker://aquasec/aqua-scanner
        with:
          args: trivy -d fs --scanners config,vuln,secret . --sast
          # To customize which severities to scan for, add the following flag: --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          # To enable SAST scanning, add: --sast
          # To enable npm/dotnet non-lock file scanning, add: --package-json / --dotnet-proj  
      - name: Build image locally
        run: |
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
      - name: Login to Aqua Registry and run Image Scan
        run: |
          docker login registry.aquasec.com -u ${{ secrets.AQUA_USER }} -p ${{ secrets.AQUA_PASSWORD }}
          docker run -v /var/run/docker.sock:/var/run/docker.sock registry.aquasec.com/scanner:2409.7.16 scan --token ${{secrets.AQUA_TOKEN}} --host ${{secrets.AQUA_HOST}} --local --registry "ECR" $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Manifest Generation
        run: |
          export BILLY_SERVER=$BILLY_SERVER
          curl -sLo install.sh download.codesec.aquasec.com/billy/install.sh
          curl -sLo install.sh.checksum https://github.com/argonsecurity/releases/releases/latest/download/install.sh.checksum
          if ! cat install.sh.checksum | shasum -a 256 ; then
            echo "install.sh checksum failed"
            exit 1
          fi
          sh install.sh
          rm install.sh install.sh.checksum
          billy generate \
              --access-token "${{ secrets.GITHUB_TOKEN }}" \
              --aqua-key "${{ secrets.AQUA_KEY }}" \
              --aqua-secret "${{ secrets.AQUA_SECRET }}" \
              --cspm-url $CSPM_URL \
              --artifact-path "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          #role-session-name: GitHubActions
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Tag and push image to Amazon ECR (+latest)
        run: |
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
